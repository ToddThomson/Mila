name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y cmake build-essential

    - name: Install CUDA Toolkit (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-repo-ubuntu2004_11.4.2-1_amd64.deb
        sudo dpkg -i cuda-repo-ubuntu2004_11.4.2-1_amd64.deb
        sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
        sudo apt-get update
        sudo apt-get -y install cuda

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install cmake visualstudio2019buildtools --install-arguments '"--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive"'

    - name: Install CUDA Toolkit (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cuda -y

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_CUDA_COMPILER=nvcc \
              -DCMAKE_CUDA_RUNTIME_LIBRARY=Static \
              -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
